/*
- THIS IS A GENERATED/BUNDLED FILE BY ROLLUP -
Please visit the repository linked to view the source code
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    format: '12h',
    customFormat: ''
};
const FORMAT_OPTIONS = {
    '12h': '12-hour',
    '12hs': '12-hour with seconds',
    '24h': '24-hour',
    '24hs': '24-hour with seconds',
    'dt': 'Date and time',
    'dts': 'Date and time with seconds',
    'custom': 'Custom format'
};
const CUSTOM_FORMAT_DESCRIPTION = new DocumentFragment();
CUSTOM_FORMAT_DESCRIPTION.append(createSpan({ text: 'Type in a custom format to use. Look ' }), createEl('a', { text: 'here', href: 'https://momentjs.com/docs/#/displaying/format/' }), createSpan({ text: ' for more information' }));
class SettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    saveSettings(refresh = false) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.saveData(this.plugin.settings);
            this.plugin.updateClock();
            if (refresh) {
                this.display();
            }
        });
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName('Format')
            .setDesc('Set a time format to display')
            .addDropdown(dropdown => dropdown
            .addOptions(FORMAT_OPTIONS)
            .setValue(this.plugin.settings.format)
            .onChange((val) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.format = val;
            yield this.saveSettings(true);
        })));
        if (this.plugin.settings.format === 'custom') {
            new obsidian.Setting(containerEl)
                .setName('Custom Format')
                .setDesc(CUSTOM_FORMAT_DESCRIPTION)
                .addText(text => text
                .setPlaceholder('hh:mm a')
                .setValue(this.plugin.settings.customFormat)
                .onChange((val) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.customFormat = val;
                yield this.saveSettings();
            })));
        }
    }
}

class Grandfather extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading Grandfather...');
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.addSettingTab(new SettingsTab(this.app, this));
            this.statusBar = this.addStatusBarItem();
            this.updateClock();
            this.registerInterval(window.setInterval(() => this.updateClock(), 500));
        });
    }
    onunload() {
        console.log('Unloading Grandfather...');
    }
    formatTimestamp() {
        const now = obsidian.moment();
        const { format, customFormat } = this.settings;
        switch (format) {
            case '12h': return now.format('h:mm a');
            case '12hs': return now.format('h:mm:ss a');
            case '24h': return now.format('H:mm');
            case '24hs': return now.format('H:mm:ss');
            case 'dt': return now.format('MMM D, Y h:mm a');
            case 'dts': return now.format('MMM D, Y h:mm:ss a');
            case 'custom': return now.format(customFormat);
            default: return "Invalid time format??";
        }
    }
    updateClock() {
        this.statusBar.setText(this.formatTimestamp());
    }
}

module.exports = Grandfather;


/* nosourcemap */